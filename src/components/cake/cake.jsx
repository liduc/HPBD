import { useEffect, useState, useRef } from "react";
import classNames from "classnames/bind";
import styles from "./cake.module.scss";
const cx = classNames.bind(styles);

const fallingImages = [
    require("../../assets/imgs/avt-1.jpg"),
    require("../../assets/imgs/avt-2.jpg"),
    require("../../assets/imgs/avt-3.jpg"),
    require("../../assets/imgs/avt-4.jpg"),
    require("../../assets/imgs/avt-5.jpg"),
    require("../../assets/imgs/avt-6.jpg"),
    require("../../assets/imgs/avt-7.jpg"),
    require("../../assets/imgs/avt-8.jpg"),
    require("../../assets/imgs/avt-9.jpg"),
    require("../../assets/imgs/avt-10.jpg"),
    require("../../assets/imgs/avt-11.jpg"),
    require("../../assets/imgs/avt-12.jpg"),
    require("../../assets/imgs/avt-13.jpg"),
    require("../../assets/imgs/avt-14.jpg"),
    require("../../assets/imgs/avt-15.jpg"),
    require("../../assets/imgs/avt-16.jpg"),
];

function Cake() {
    const [showTiers, setShowTiers] = useState([
        false,
        false,
        false,
        false,
        false,
    ]);
    const [showCandles, setShowCandles] = useState(false);
    const [showText, setShowText] = useState(false);
    const [showFallingImgs, setShowFallingImgs] = useState(false);
    const [fallingImgList, setFallingImgList] = useState([]);
    const [showLetter, setShowLetter] = useState(false);
    const [showLetterContent, setShowLetterContent] = useState(false);
    const [typedText, setTypedText] = useState("");
    const [canStartFalling, setCanStartFalling] = useState(false);
    const letterFull =
        "Ch√∫c em Hi·ªÅn tu·ªïi m·ªõi h·ªçc th·∫≠t gi·ªèi, lu√¥n vui v·∫ª, xinh ƒë·∫πp, m·∫°nh kh·ªèe, g·∫∑p nhi·ªÅu may m·∫Øn, c√≥ th·∫≠t nhi·ªÅu b·∫°n t·ªët, lu√¥n t·ª± tin v√† h·∫°nh ph√∫c tr√™n con ƒë∆∞·ªùng m√¨nh ch·ªçn. Ch√∫c m·ªçi ∆∞·ªõc m∆° c·ªßa em ƒë·ªÅu th√†nh hi·ªán th·ª±c v√† lu√¥n c√≥ ng∆∞·ªùi b√™n c·∫°nh ƒë·ªông vi√™n, chia s·∫ª m·ªçi ni·ªÅm vui n·ªói bu·ªìn. H√£y lu√¥n l√† ch√≠nh m√¨nh, s·ªëng h·∫øt m√¨nh v·ªõi tu·ªïi tr·∫ª v√† ƒëam m√™ nh√©! Happy Birthday!";

    const typingRef = useRef();

    // Hi·ªán t·ª´ng t·∫ßng, n·∫øn, ch·ªØ, r·ªìi ·∫£nh r∆°i
    useEffect(() => {
        setTimeout(() => setShowTiers([true, false, false, false, false]), 300);
        setTimeout(() => setShowTiers([true, true, false, false, false]), 900);
        setTimeout(() => setShowTiers([true, true, true, false, false]), 1500);
        setTimeout(() => setShowTiers([true, true, true, true, false]), 2100);
        setTimeout(() => setShowTiers([true, true, true, true, true]), 2700);
        setTimeout(() => setShowCandles(true), 3300);
        setTimeout(() => setShowText(true), 3900);
    }, []);

    // ·∫¢nh r∆°i li√™n t·ª•c v√¥ h·∫°n, ch·ªâ b·∫Øt ƒë·∫ßu khi canStartFalling = true
    useEffect(() => {
        if (!canStartFalling) return;
        setShowFallingImgs(true);
    }, [canStartFalling]);

    useEffect(() => {
        if (!showFallingImgs || showLetter) return; // <-- ch·ªâ r∆°i khi ch∆∞a m·ªü th∆∞
        let running = true;
        function dropImg() {
            if (!running || showLetter) return;
            const imgIdx = Math.floor(Math.random() * fallingImages.length);
            const left = Math.random() * 80 + 10; // 10% - 90%
            const id = Date.now() + Math.random();
            setFallingImgList((list) => [
                ...list,
                { src: fallingImages[imgIdx], left, id },
            ]);
            setTimeout(() => {
                setFallingImgList((list) =>
                    list.filter((img) => img.id !== id)
                );
            }, 9000);
            setTimeout(dropImg, 700);
        }
        dropImg();
        return () => {
            running = false;
        };
    }, [showFallingImgs, showLetter]);

    // Hi·ªáu ·ª©ng g√µ t·ª´ng ch·ªØ cho th∆∞
    useEffect(() => {
        if (!showLetterContent) return;
        let i = 0;
        function type() {
            setTypedText(letterFull.slice(0, i));
            if (i < letterFull.length) {
                i++;
                typingRef.current = setTimeout(type, 30);
            }
        }
        type();
        return () => clearTimeout(typingRef.current);
    }, [showLetterContent]);

    // ƒê√≥ng th∆∞
    const handleCloseLetter = () => {
        setShowLetter(false);
        setShowLetterContent(false);
        setTypedText("");
    };

    // Khi th∆∞ xu·∫•t hi·ªán, d·ª´ng ·∫£nh r∆°i
    useEffect(() => {
        if (showLetter) setShowFallingImgs(false);
    }, [showLetter]);

    return (
        <div className={cx("cake-outer")}>
            <div className={cx("cake-stand")}></div>
            <div className={cx("cake-stack")}>
                <div
                    className={cx("cake-tier", "tier5", showTiers[4] && "show")}
                ></div>
                <div
                    className={cx("cake-tier", "tier4", showTiers[3] && "show")}
                ></div>
                <div
                    className={cx("cake-tier", "tier3", showTiers[2] && "show")}
                ></div>
                <div
                    className={cx("cake-tier", "tier2", showTiers[1] && "show")}
                ></div>
                <div
                    className={cx("cake-tier", "tier1", showTiers[0] && "show")}
                ></div>
                {showCandles && (
                    <div className={cx("candles")}>
                        <div className={cx("candle")}></div>
                        <div className={cx("candle")}></div>
                        <div className={cx("candle")}></div>
                    </div>
                )}
            </div>
            {showText && (
                <div className={cx("cake-text")}>
                    <span>üéâ Happy Birthday Minh Hi·ªÅn üéâ</span>
                </div>
            )}

            {/* N√∫t b·∫Øt ƒë·∫ßu r∆°i ·∫£nh */}
            {showText && !canStartFalling && (
                <button
                    className={cx("letter-btn")}
                    style={{
                        position: "absolute",
                        left: "50%",
                        top: "calc(55vh + 100px)",
                        transform: "translateX(-50%)",
                        zIndex: 2000,
                        fontSize: "2rem",
                        padding: "16px 40px",
                    }}
                    onClick={() => setCanStartFalling(true)}
                >
                    ·∫§n v√†o ƒë√¢y ƒë·ªÉ xem ƒëi·ªÅu b·∫•t ng·ªù üéÅ
                </button>
            )}

            {/* ·∫¢nh r∆°i */}
            {fallingImgList.map((img) => (
                <img
                    key={img.id}
                    src={img.src}
                    alt=""
                    className={cx("falling-img")}
                    style={{
                        left: `${img.left}%`,
                    }}
                />
            ))}

            {/* N√∫t m·ªü th∆∞ n·ªïi ·ªü g√≥c/ph√≠a d∆∞·ªõi m√†n h√¨nh, lu√¥n hi·ªán khi ·∫£nh ƒëang r∆°i */}
            {canStartFalling && !showLetter && (
                <button
                    className={cx("letter-btn")}
                    style={{
                        position: "fixed",
                        right: 32,
                        bottom: 32,
                        zIndex: 3000,
                        fontSize: "1.5rem",
                        padding: "12px 28px",
                        background: "#fff",
                        color: "#d81b60",
                        border: "2px solid #ff69b4",
                        boxShadow: "0 2px 8px #ffb6e6aa",
                    }}
                    onClick={() => setShowLetter(true)}
                >
                    üì© M·ªü th∆∞ g·ª≠i Minh Hi·ªÅn
                </button>
            )}

            {/* Popup th∆∞ */}
            {showLetter && (
                <div className={cx("letter-popup")}>
                    {!showLetterContent ? (
                        <button
                            className={cx("letter-btn")}
                            onClick={() => setShowLetterContent(true)}
                            style={{ marginBottom: 12 }}
                        >
                            üìñ ƒê·ªçc th∆∞
                        </button>
                    ) : (
                        <>
                            <div className={cx("letter-content")}>
                                <div className={cx("letter-text")}>
                                    {typedText}|
                                </div>
                            </div>
                            <button
                                className={cx("letter-btn")}
                                style={{
                                    background: "#bbb",
                                    color: "#d81b60",
                                    marginTop: 18,
                                }}
                                onClick={handleCloseLetter}
                            >
                                ƒê√≥ng th∆∞
                            </button>
                        </>
                    )}
                </div>
            )}
        </div>
    );
}

export default Cake;
